//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.0.0 (NJsonSchema v10.7.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IClient {
    /**
     * @return Success
     */
    getCouriers(): Observable<CourierData[]>;
    /**
     * @param body (optional) 
     * @return Success
     */
    addCourier(body: AddCourierData | undefined): Observable<boolean[]>;
    /**
     * @param body (optional) 
     * @return Success
     */
    addPrices(body: CourierPriceData[] | null | undefined): Observable<boolean[]>;
    /**
     * @param body (optional) 
     * @return Success
     */
    getPrice(body: PackageDetailData | undefined): Observable<CourierOfferPrice>;
    /**
     * @param body (optional) 
     * @return Success
     */
    userRegistration(body: RegistrationData | undefined): Observable<boolean>;
    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined): Observable<LoginData>;
}

@Injectable()
export class Client implements IClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @return Success
     */
    getCouriers(): Observable<CourierData[]> {
        let url_ = this.baseUrl + "/Couriers/GetCouriers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "text/plain"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetCouriers(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetCouriers(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CourierData[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CourierData[]>;
        }));
    }

    protected processGetCouriers(response: HttpResponseBase): Observable<CourierData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CourierData.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CourierData[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addCourier(body: AddCourierData | undefined): Observable<boolean[]> {
        let url_ = this.baseUrl + "/Couriers/AddCourier";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddCourier(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddCourier(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean[]>;
        }));
    }

    protected processAddCourier(response: HttpResponseBase): Observable<boolean[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    addPrices(body: CourierPriceData[] | null | undefined): Observable<boolean[]> {
        let url_ = this.baseUrl + "/Couriers/AddPrices";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddPrices(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddPrices(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean[]>;
        }));
    }

    protected processAddPrices(response: HttpResponseBase): Observable<boolean[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    getPrice(body: PackageDetailData | undefined): Observable<CourierOfferPrice> {
        let url_ = this.baseUrl + "/api/Order/GetPrice";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPrice(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPrice(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<CourierOfferPrice>;
                }
            } else
                return _observableThrow(response_) as any as Observable<CourierOfferPrice>;
        }));
    }

    protected processGetPrice(response: HttpResponseBase): Observable<CourierOfferPrice> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CourierOfferPrice.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CourierOfferPrice>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    userRegistration(body: RegistrationData | undefined): Observable<boolean> {
        let url_ = this.baseUrl + "/api/User/UserRegistration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUserRegistration(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUserRegistration(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<boolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<boolean>;
        }));
    }

    protected processUserRegistration(response: HttpResponseBase): Observable<boolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<boolean>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginRequest | undefined): Observable<LoginData> {
        let url_ = this.baseUrl + "/api/User/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "text/plain"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<LoginData>;
                }
            } else
                return _observableThrow(response_) as any as Observable<LoginData>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<LoginData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LoginData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<LoginData>(null as any);
    }
}

export class CourierPriceData implements ICourierPriceData {
    from?: number | undefined;
    to?: number | undefined;
    isWeight?: boolean;
    price?: number;
    courierId?: number;

    constructor(data?: ICourierPriceData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.from = _data["from"];
            this.to = _data["to"];
            this.isWeight = _data["isWeight"];
            this.price = _data["price"];
            this.courierId = _data["courierId"];
        }
    }

    static fromJS(data: any): CourierPriceData {
        data = typeof data === 'object' ? data : {};
        let result = new CourierPriceData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["from"] = this.from;
        data["to"] = this.to;
        data["isWeight"] = this.isWeight;
        data["price"] = this.price;
        data["courierId"] = this.courierId;
        return data;
    }
}

export interface ICourierPriceData {
    from?: number | undefined;
    to?: number | undefined;
    isWeight?: boolean;
    price?: number;
    courierId?: number;
}

export class CourierData implements ICourierData {
    id?: number;
    name?: string | undefined;
    dimensionFrom?: number | undefined;
    dimensionTo?: number | undefined;
    weightFrom?: number | undefined;
    weightTo?: number | undefined;
    prices?: CourierPriceData[] | undefined;

    constructor(data?: ICourierData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.dimensionFrom = _data["dimensionFrom"];
            this.dimensionTo = _data["dimensionTo"];
            this.weightFrom = _data["weightFrom"];
            this.weightTo = _data["weightTo"];
            if (Array.isArray(_data["prices"])) {
                this.prices = [] as any;
                for (let item of _data["prices"])
                    this.prices!.push(CourierPriceData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CourierData {
        data = typeof data === 'object' ? data : {};
        let result = new CourierData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["dimensionFrom"] = this.dimensionFrom;
        data["dimensionTo"] = this.dimensionTo;
        data["weightFrom"] = this.weightFrom;
        data["weightTo"] = this.weightTo;
        if (Array.isArray(this.prices)) {
            data["prices"] = [];
            for (let item of this.prices)
                data["prices"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICourierData {
    id?: number;
    name?: string | undefined;
    dimensionFrom?: number | undefined;
    dimensionTo?: number | undefined;
    weightFrom?: number | undefined;
    weightTo?: number | undefined;
    prices?: CourierPriceData[] | undefined;
}

export class AddCourierData implements IAddCourierData {
    name?: string | undefined;
    dimensionFrom?: number | undefined;
    dimensionTo?: number | undefined;
    weightFrom?: number | undefined;
    weightTo?: number | undefined;

    constructor(data?: IAddCourierData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.dimensionFrom = _data["dimensionFrom"];
            this.dimensionTo = _data["dimensionTo"];
            this.weightFrom = _data["weightFrom"];
            this.weightTo = _data["weightTo"];
        }
    }

    static fromJS(data: any): AddCourierData {
        data = typeof data === 'object' ? data : {};
        let result = new AddCourierData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["dimensionFrom"] = this.dimensionFrom;
        data["dimensionTo"] = this.dimensionTo;
        data["weightFrom"] = this.weightFrom;
        data["weightTo"] = this.weightTo;
        return data;
    }
}

export interface IAddCourierData {
    name?: string | undefined;
    dimensionFrom?: number | undefined;
    dimensionTo?: number | undefined;
    weightFrom?: number | undefined;
    weightTo?: number | undefined;
}

export class PackageDetailData implements IPackageDetailData {
    userId?: number;
    width?: number;
    height?: number;
    depth?: number;
    weight?: number;

    constructor(data?: IPackageDetailData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.width = _data["width"];
            this.height = _data["height"];
            this.depth = _data["depth"];
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): PackageDetailData {
        data = typeof data === 'object' ? data : {};
        let result = new PackageDetailData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["width"] = this.width;
        data["height"] = this.height;
        data["depth"] = this.depth;
        data["weight"] = this.weight;
        return data;
    }
}

export interface IPackageDetailData {
    userId?: number;
    width?: number;
    height?: number;
    depth?: number;
    weight?: number;
}

export class CourierOfferPrice implements ICourierOfferPrice {
    price?: number;
    courier?: CourierData;

    constructor(data?: ICourierOfferPrice) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.price = _data["price"];
            this.courier = _data["courier"] ? CourierData.fromJS(_data["courier"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CourierOfferPrice {
        data = typeof data === 'object' ? data : {};
        let result = new CourierOfferPrice();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["price"] = this.price;
        data["courier"] = this.courier ? this.courier.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICourierOfferPrice {
    price?: number;
    courier?: CourierData;
}

export class RegistrationData implements IRegistrationData {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegistrationData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegistrationData {
        data = typeof data === 'object' ? data : {};
        let result = new RegistrationData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegistrationData {
    username?: string | undefined;
    password?: string | undefined;
}

export class LoginRequest implements ILoginRequest {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginRequest {
        data = typeof data === 'object' ? data : {};
        let result = new LoginRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginRequest {
    username?: string | undefined;
    password?: string | undefined;
}

export class LoginData implements ILoginData {
    username?: string | undefined;
    jwtToken?: string | undefined;

    constructor(data?: ILoginData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.jwtToken = _data["jwtToken"];
        }
    }

    static fromJS(data: any): LoginData {
        data = typeof data === 'object' ? data : {};
        let result = new LoginData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["jwtToken"] = this.jwtToken;
        return data;
    }
}

export interface ILoginData {
    username?: string | undefined;
    jwtToken?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}